{"version":3,"sources":["pages/context/master.tsx","pages/theme/index.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MasterDataContext","React","createContext","reportingTypeList","houses","attendanceEntity","roles","setReportingTypeList","_","setHouses","setAttendanceEntity","setRoles","theme","createMuiTheme","palette","primary","main","grey","A400","light","secondary","orange","Profile","lazy","Login","SelectHouse","ForgotPassword","ResetPassword","HouseList","HouseAdd","HouseEdit","ReportingTypeList","ReportingTypeAdd","ReportingTypeEdit","RoleList","RoleAdd","RoleEdit","AttendanceEntityList","AttendanceEntityAdd","AttendanceEntityEdit","PrivateRoutes","exact","path","App","useState","useEffect","getMasterData","a","ThemeProvider","Provider","value","fallback","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.caf8690c.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface MasterData {\n  reportingTypeList: Array<any>;\n  houses: Array<any>;\n  attendanceEntity: Array<any>;\n  roles: Array<any>;\n  setReportingTypeList: Function;\n  setHouses: Function;\n  setAttendanceEntity: Function;\n  setRoles: Function;\n}\n\nconst masterData: MasterData = {\n  reportingTypeList: [],\n  houses: [],\n  attendanceEntity: [],\n  roles: [],\n  setReportingTypeList: (_: any) => null,\n  setHouses: (_: any) => null,\n  setAttendanceEntity: (_: any) => null,\n  setRoles: (_: any) => null,\n};\n\nconst MasterDataContext = React.createContext(masterData);\nexport { MasterDataContext };\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { orange, grey } from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: grey.A400,\n      light: grey[400]\n    },\n    secondary: {\n      main: orange[500],\n    },\n  },\n  \n});\n\nexport default theme;\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { MasterDataContext } from \"./pages/context/master\";\nimport { ReportingType } from \"./pages/api/reporting-types/model.interface\";\nimport { House } from \"./pages/api/houses/model.interface\";\nimport { Role } from \"./pages/api/roles/model.interface\";\n\nimport * as ReportingTypesAPI from \"./pages//api/reporting-types\";\nimport * as HouseAPI from \"./pages//api/houses\";\nimport * as AttendanceEntityAPI from \"./pages//api/attendance-entities\";\nimport * as RoleAPI from \"./pages//api/roles\";\n\nimport { AttendanceEntity } from \"./pages/api/attendance-entities/model.interface\";\nimport {\n  ThemeProvider,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport theme from \"./pages/theme\";\n\nconst Profile = lazy(() => import(\"./pages/profile\"));\nconst Login = lazy(() => import(\"./pages/auth/login\"));\nconst SelectHouse = lazy(() => import(\"./pages/auth/onboard/select-house\"));\nconst ForgotPassword = lazy(() => import(\"./pages/auth/forgot-password\"));\nconst ResetPassword = lazy(() => import(\"./pages/auth/reset-password\"));\n\nconst HouseList = lazy(() => import(\"./pages/houses/list\"));\nconst HouseAdd = lazy(() => import(\"./pages/houses/add\"));\nconst HouseEdit = lazy(() => import(\"./pages/houses/edit/[id]\"));\n\nconst ReportingTypeList = lazy(() => import(\"./pages/reporting-types/list\"));\nconst ReportingTypeAdd = lazy(() => import(\"./pages/reporting-types/add\"));\nconst ReportingTypeEdit = lazy(() =>\n  import(\"./pages/reporting-types/edit/[id]\")\n);\n\nconst RoleList = lazy(() => import(\"./pages/roles/list\"));\nconst RoleAdd = lazy(() => import(\"./pages/roles/add\"));\nconst RoleEdit = lazy(() => import(\"./pages/roles/edit/[id]\"));\n\nconst AttendanceEntityList = lazy(() =>\n  import(\"./pages/attendance-entities/list\")\n);\nconst AttendanceEntityAdd = lazy(() =>\n  import(\"./pages/attendance-entities/add\")\n);\nconst AttendanceEntityEdit = lazy(() =>\n  import(\"./pages/attendance-entities/edit/[id]\")\n);\n\nconst PrivateRoutes = () => {\n  return (\n    <>\n      <Route exact path=\"/houses\">\n        <HouseList />\n      </Route>\n      <Route exact path=\"/houses/add\">\n        <HouseAdd />\n      </Route>\n      <Route path=\"/houses/edit/:id\">\n        <HouseEdit />\n      </Route>\n\n      <Route exact path=\"/reporting-types\">\n        <ReportingTypeList />\n      </Route>\n      <Route exact path=\"/reporting-types/add\">\n        <ReportingTypeAdd />\n      </Route>\n      <Route path=\"/reporting-types/edit/:id\">\n        <ReportingTypeEdit />\n      </Route>\n\n      <Route exact path=\"/roles\">\n        <RoleList />\n      </Route>\n      <Route exact path=\"/roles/add\">\n        <RoleAdd />\n      </Route>\n      <Route path=\"/roles/edit/:id\">\n        <RoleEdit />\n      </Route>\n\n      <Route exact path=\"/attendance-entities\">\n        <AttendanceEntityList />\n      </Route>\n      <Route exact path=\"/attendance-entities/add\">\n        <AttendanceEntityAdd />\n      </Route>\n      <Route path=\"/attendance-entities/edit/:id\">\n        <AttendanceEntityEdit />\n      </Route>\n\n      <Route exact path=\"/profile\">\n        <Profile />\n      </Route>\n    </>\n  );\n};\nfunction App() {\n  const [houses, setHouses] = React.useState([]);\n  const [attendanceEntity, setAttendanceEntity] = React.useState([]);\n  const [reportingTypeList, setReportingTypeList] = React.useState([]);\n  const [roles, setRoles] = React.useState([]);\n\n  React.useEffect(() => {\n    getMasterData();\n  }, []);\n\n  const getMasterData = async () => {\n    // const reportingTypeList:\n    //   | any\n    //   | Array<ReportingType> = await ReportingTypesAPI.get();\n    // const houses: any | Array<House> = await HouseAPI.get();\n    // const roles: any | Array<Role> = await RoleAPI.get();\n    // const attendanceEntity:\n    //   | any\n    //   | Array<AttendanceEntity> = await AttendanceEntityAPI.get();\n    // setHouses(houses);\n    // setAttendanceEntity(attendanceEntity);\n    // setReportingTypeList(reportingTypeList);\n    // setRoles(roles);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <MasterDataContext.Provider\n        value={{\n          houses,\n          reportingTypeList,\n          attendanceEntity,\n          roles,\n\n          setHouses: setHouses,\n          setAttendanceEntity: setAttendanceEntity,\n          setReportingTypeList: setReportingTypeList,\n          setRoles: setRoles,\n        }}\n      >\n        <Router>\n          <Switch>\n            <Suspense fallback={<LinearProgress />}>\n              <Route path=\"/auth/forgot-password\">\n                <ForgotPassword />\n              </Route>\n              <Route path=\"/auth/reset-password\">\n                <ResetPassword />\n              </Route>\n              <Route path=\"/onboard/select-house\">\n                <SelectHouse />\n              </Route>\n              <Route path=\"/auth/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/\">\n                <Login />\n              </Route>\n              <PrivateRoutes></PrivateRoutes>\n            </Suspense>\n          </Switch>\n        </Router>\n      </MasterDataContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}